***Query Data Linq Syntax vs Extension method***
static void Main(string[] args)
        {
        //of course this is coming from our context and we will use our dbsets to query data
            var context = new PlutoContext();
            //Linq syntax
            var query =
                from c in context.Courses
                where c.Name.Contains("c#")
                orderby c.Name
                select c;

            foreach(var q in query)
            {
                System.Console.WriteLine(q.Name);
            }

            //extension methods are more powerful and should be used more often
            var courses = context.Courses.Where(c => c.Name.Contains("c#")).OrderBy(c => c.Name);

            foreach (var c in courses)
            {
                System.Console.WriteLine(c.Name);
            }

            Console.ReadKey();
        }


**Using Group**
    static void Main(string[] args)
        {
            var context = new PlutoContext();

            var query =
                from c in context.Courses
                group c by c.Level into g
                select g;

            //this group variable we create below will be enumareable, it is like a list
            //notice how we use it in the second foreach to display the course names
            foreach(var group in query)
            {
                Console.WriteLine(group.Key);
                foreach (var g in group)
                {
                    Console.WriteLine(g.Name);
                }
            }
            
            Console.ReadKey();
        }

**Ordering using orderby**
static void Main(string[] args)
        {
            var context = new PlutoContext();

            var query =
                from c in context.Courses
                orderby c.Level ascending, c.Name
                select c;

            foreach(var t in query)
            {
                
                Console.WriteLine("{0} {1}","Level "+ t.Level,"Course Title: "+ t.Name);
              
            }
            
            Console.ReadKey();
        }
  **using group by and count**
   static void Main(string[] args)
        {
            var context = new PlutoContext();

            var query =
                from c in context.Courses
                group c by c.Level into g
                select g;

          //after placing all course levels into a group, we can use the count method to count how
          //many courses are in each level
            foreach(var group in query)
            {
                Console.WriteLine("{0} {1}",group.Key, group.Count());
            }
            
            Console.ReadKey();
        }

**Projection into an anonyms object**
static void Main(string[] args)
        {
            var context = new PlutoContext();

            var query =
                from c in context.Courses
                    //below we do a projection into an anomys object
                select new { CourseName = c.Name, AuthorName = c.Author.Name };

            foreach (var q in query)
            {
                Console.WriteLine("{0}{1}", q.CourseName, q.AuthorName);
            }


            Console.ReadKey();
        }
 
**Group Join**
static void Main(string[] args)
        {
            var context = new PlutoContext();

            //get a list of authors and join them with their courses
            var query = 
                from a in context.Authors
                join c in context.Courses on a.Id equals c.AuthorId into g
                select new {AuthorName = a.Name, Courses = g.Count()}
                ;
            foreach (var x in query)
            {
                Console.WriteLine("{0}, {1}",x.AuthorName, x.Courses);
            }

            Console.ReadKey();
        }

**cross join**
     static void Main(string[] args)
        {
            var context = new PlutoContext();

            //get a list of authors and join them with their courses
            var query =
                from a in context.Authors
                from c in context.Courses
                    //below we do a projection into an anomys object
                select new { AuthorsName = a.Name, CouseName = c.Name };

                ;
            foreach (var x in query)
            {
                Console.WriteLine("{0} {1}", x.AuthorsName, x.CouseName);
            }

            Console.ReadKey();
        }
        
**Restricition**
here we want to retrieve all courses for level1 and only for level 1
static void Main(string[] args)
        {
            var context = new PlutoContext();

            //here is the linq way of finding courses that are listed as level 1
            var query =
                from c in context.Courses
                where c.Level == 1
                select c;
            foreach (var x in levelone)
            {
                Console.WriteLine(x.Name);
            }

            Console.ReadKey();
        }



 
