1. Create a Repository interface
using System.Collections.Generic;
using System.Threading.Tasks;
using DatingApp.API.models;

namespace DatingApp.API.data
{
    public interface IDatingRepository
    {
        // Create 2 Genereic classes to add and delete users
         void Add<T>(T enity) where T: class;
         void Delete<T>(T enity) where T: class;
        //  Create a async bool method for saveall
         Task<bool> SaveAll();
        //  create a IEnumerable to fetch all users async
         Task<IEnumerable<User>> GetUsers();
        //  Create anothewr async method to fetch a single user
         Task<User> GetUser(int Id);
    }
}

2.the create the repository

using System.Collections.Generic;
using System.Threading.Tasks;
using DatingApp.API.Data;
using DatingApp.API.models;
using Microsoft.EntityFrameworkCore;

namespace DatingApp.API.data
{
  // use inhertience to inherit the interface we created for dating repository 
  public class DatingRepository : IDatingRepository
  {
      private readonly DataContext _context;

      public DatingRepository(DataContext context)
      {
          _context = context;
      }
    public void Add<T>(T enity) where T : class
    {
      _context.Add(enity);

    }

    public void Delete<T>(T enity) where T : class
    {
      _context.Remove(enity);
    }

    public async Task<User> GetUser(int Id)
    {
      var user = await _context.Users.Include(p => p.Photos).FirstOrDefaultAsync(u=>u.Id == Id);

      return user;
    }

    public async Task<IEnumerable<User>> GetUsers()
    {
      var users = await _context.Users.Include(p=> p.Photos).ToListAsync();
      return users;
    }

    public async Task<bool> SaveAll()
    {
      return await _context.SaveChangesAsync() > 0;
    }
  }
}

3.Then create the controller
using System.Collections;
using System.Collections.Generic;
using System.Threading.Tasks;
using AutoMapper;
using DatingApp.API.data;
using DatingApp.API.Dtos;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;

namespace DatingApp.API.Controllers
{
    [Authorize]
    //the url to call on will be http://localhost:5000/api/users
    [Route("api/[controller]")]
    public class UsersController: Controller
    {
        private readonly IDatingRepository _repo;
        private readonly IMapper _mapper;
        public UsersController(IDatingRepository repo, IMapper mapper)
        {
            _repo = repo;
            _mapper = mapper;
        }

        [HttpGet]
        public async Task<IActionResult> GetUsers(){
            var users = await _repo.GetUsers();
            var usersToReturn = _mapper.Map<IEnumerable<UserForListDto>>(users);
            return Ok(usersToReturn);
        }
        
        [HttpGet("{id}")]
        public async Task<IActionResult> GetUser(int id){
            var user = await _repo.GetUser(id);
             var userToReturn = _mapper.Map<UserForDetailedDto>(user);
            return Ok(userToReturn);
        }
    }
}






3.5 install jwt
npm install angular2-jwt --save

3.6 click on app and create a module in the ts file paste this code
import { NgModule } from '@angular/core';
import { Http, RequestOptions } from '@angular/http';
import { AuthHttp, AuthConfig } from 'angular2-jwt';

export function authHttpServiceFactory(http: Http, options: RequestOptions) {
  return new AuthHttp(new AuthConfig({
    tokenName: 'token',
    tokenGetter: (() => localStorage.getItem('token')),
    globalHeaders: [{'Content-Type': 'application/json'}],
  }), http, options);
}
@NgModule({
  providers: [
    {
      provide: AuthHttp,
      useFactory: authHttpServiceFactory,
      deps: [Http, RequestOptions]
    }
  ]
})
export class AuthModule {}


3.7 in app.module add AuthModule, the one we created above in the imports section

imports: [
    AuthModule
  ],







4.now in angular go to environments.ts
export const environment = {
  production: false,
  apiUrl: 'http://localhost:5000/api/'
};

5. create a user model in angulae
import { Photo } from './Photo';

export interface User {
  id: number;
  username: string;
  knownAs: string;
  age: number;
  gender: string;
  created: Date;
  lastActive: Date;
  photoUrl: string;
  city: string;
  country: string;
  interests?: string;
  introduction?: string;
  lookingFor?: string;
  photos?: Photo[];

}
6. create a users service
import { Injectable } from '@angular/core';
import { environment } from '../../environments/environment';
import { Http, RequestOptions, Headers } from '@angular/http';
import { IfObservable } from 'rxjs/observable/IfObservable';
import { User } from '../_models/User';
import { Observable } from 'rxjs/Observable';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/catch';
import 'rxjs/add/observable/throw';
import { AuthHttp } from 'angular2-jwt';

@Injectable()
export class UserService {
baseUrl = environment.apiUrl;
constructor(private authhttp: AuthHttp) { }
getUsers(): Observable<User[]> {
  return this.authhttp
  .get(this.baseUrl + 'users')
  .map(response => <User[]>response.json())
  .catch(this.handleError);
}

private handleError(error: any) {
  const applicationError = error.headers.get('Application-Error');
  if (applicationError) {
    return Observable.throw(applicationError);
  }
  const serverError = error.json();
  let modelStateError = '';
  if (serverError) {
    for (const key in serverError) {
      if (serverError[key]) {
        modelStateError += serverError[key] + '\n';
      }
    }
  }
  return Observable.throw(modelStateError || 'Server error');
}

}

7. now in our componenet we will use the service above
import { Component, OnInit } from '@angular/core';
import { User } from '../_models/User';
import { UserService } from '../_services/User.service';
import { AlertifyService } from '../_services/alertify.service';

@Component({
  selector: 'app-member-list',
  templateUrl: './member-list.component.html',
  styleUrls: ['./member-list.component.css']
})
export class MemberListComponent implements OnInit {
users: User[];
  constructor(private userservice: UserService, private alertify: AlertifyService) { }

  ngOnInit() {
    this.loadUsers();
  }

  loadUsers() {
    this.userservice.getUsers().subscribe((users: User[]) => {
        this.users = users;
    }, error => {
      this.alertify.error('No Users Found');
    });
  }

}

8. now use the user variable in the component html
<div class="container">
  <div class="row">
    <div class="col-lg-2 col-md-3 col-sm-6">
      <p *ngFor="let user of users">{{user.knownAs}}</p>
    </div>
  </div>
</div>


