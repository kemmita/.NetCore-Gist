1. go to into your helpers folder and create a new c# class and call it PaginationHeader
namespace DatingApp.API.Helpers
{
    public class PaginationHeader
    {
        public int CurrentPage { get; set; }
        public int ItemsPerPage { get; set; }
        public int TotalItems { get; set; }
        public int TotalPages { get; set; }
        public PaginationHeader(int currentPage, int itemsPerPage, int totalItems, int totalPages)
        {
            CurrentPage = currentPage;
            ItemsPerPage = itemsPerPage;
            TotalItems = totalItems;
            TotalPages = totalPages;
        }
    }
}
2. Satying in the helpers folder create a new file called PagedList
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;

namespace DatingApp.API.Helpers
{
    public class PagedList<T> : List<T>
    {
        public int  CurrentPage { get; set; }
        public int TotalPages { get; set; }
        public int PageSize { get; set; }
        public int TotalCount { get; set; }

        public PagedList(List<T> items, int count, int pageNumber, int pageSize)
        {
            TotalCount = count;
            PageSize = pageSize;
            CurrentPage = pageNumber;
            TotalPages = (int)Math.Ceiling(count / (double)pageSize);
            this.AddRange(items);
        }
        public static async Task<PagedList<T>> CreateAsync(IQueryable<T> source, int pageNumber, int pageSize){
                var count = await source.CountAsync();
                var items = await source.Skip((pageNumber -1) * pageSize).Take(pageSize).ToListAsync();
                return new PagedList<T>(items, count, pageNumber, pageSize);
        }
    }
}

3. now in your Extensions file located in your helpers folder create a new AddPagination method 
  public static void AddPagination(this HttpResponse response, int currentPage, int itemsPerPage, int totalItems, int totalPages){
            PaginationHeader paginationHeader = new PaginationHeader(currentPage, itemsPerPage, totalItems, totalPages);
            var camelCaseFormater = new JsonSerializerSettings();
            camelCaseFormater.ContractResolver = new CamelCasePropertyNamesContractResolver();
            response.Headers.Add("Pagination", JsonConvert.SerializeObject(paginationHeader, camelCaseFormater));
            response.Headers.Add("Access-Control-Expose-Headers", "Pagination"); 
        }
 4. now before implmenting this in the repository and usercontroller, we need to create one more file in the helpers folder called UserParams
 namespace DatingApp.API.Helpers
{
    public class UserParams
    {
        private const int MaxPageSize = 50;
        public int PageNumber { get; set; } = 1;
        private int pageSize = 10;
        public int PageSize
        {
            get { return pageSize;}
            set { pageSize = (value > MaxPageSize)? MaxPageSize: value;}
        }
        
    }
}

5. now go into the IRepository and change IEnumerable into the generic list class we created
Task<PagedList<User>> GetUsers(UserParams userParams);

6.now in the actual Repositroy and create the Task mentioned above
 public async Task<PagedList<User>> GetUsers(UserParams userParams)
    {
      var users =  _context.Users.Include(p=> p.Photos);
      return await PagedList<User>.CreateAsync(users, userParams.PageNumber, userParams.PageSize);
    }
 
 7.now in the UsersController implement the pagination
  [HttpGet]
        public async Task<IActionResult> GetUsers(UserParams userParams){
            var users = await _repo.GetUsers(userParams);
            var usersToReturn = _mapper.Map<IEnumerable<UserForListDto>>(users);
            Response.AddPagination(users.CurrentPage, users.PageSize, users.TotalCount, users.TotalPages);
            return Ok(usersToReturn);
        }
 
 8.now in the SPA create a pagination interface in the _models folder
 export interface Pagination {
  currentPage: number;
  itemsPerPage: number;
  totalItems: number;
  totalPages: number;
}

export class PaginatedResult<T> {
  result: T; // users will be stored here
  pagination: Pagination; // pagination will be stored here
}

9.now in the user serviuces file implement the pagination functionality
getUsers(page?: number, itemsPerPage?: number) {
  const paginatedResult: PaginatedResult<User[]> = new PaginatedResult<User[]>();
  let queryString = '?';

  if (page != null && itemsPerPage != null) {
    queryString += 'pageNumber=' + page + '&pageSize=' + itemsPerPage;
  }
  return this.authhttp
  .get(this.baseUrl + 'users' + queryString)
  .map((response: Response) => {
    paginatedResult.result = response.json();

    if (response.headers.get('Pagination') != null) {
      paginatedResult.pagination = JSON.parse(response.headers.get('Pagination'));
    }
    return paginatedResult;
  })
  .catch(this.handleError);
}

10. in app.modules include PaginationModule in the app.modules file
 imports: [
    PaginationModule.forRoot()
  ],

11. Member-list resolver file
import { Observable } from 'rxjs/RX';
import { Resolve, Router, ActivatedRouteSnapshot } from '@angular/router';
import { User } from '../_models/User';
import { Injectable } from '@angular/core';
import { UserService } from '../_services/User.service';
import { AlertifyService } from '../_services/alertify.service';


@Injectable()
export class MemberListResolver implements Resolve<User[]> {
pageSize = 5;
pageNumber = 1;

  constructor(private userservice: UserService, private router: Router, private alertify: AlertifyService) {}

  resolve(route: ActivatedRouteSnapshot): Observable<User[]> {
    return this.userservice.getUsers(this.pageNumber, this.pageSize).catch(error => {
      this.alertify.error('problem retrieveing data');
      this.router.navigate(['/home']);
      return Observable.of(null);
    });
  }
}

12. members list component.ts
import { Component, OnInit } from '@angular/core';
import { User } from '../../_models/User';
import { UserService } from '../../_services/User.service';
import { AlertifyService } from '../../_services/alertify.service';
import { ActivatedRoute } from '@angular/router';
import { Pagination, PaginatedResult } from '../../_models/pagination';

@Component({
  selector: 'app-member-list',
  templateUrl: './member-list.component.html',
  styleUrls: ['./member-list.component.css']
})
export class MemberListComponent implements OnInit {
users: User[];
pagination: Pagination;
  constructor(private userservice: UserService, private alertify: AlertifyService, private route: ActivatedRoute) { }

  ngOnInit() {
    this.route.data.subscribe(data => {
      this.users = data['users'].result;
      this.pagination = data['users'].pagination;
    });
  }
  loadUsers() {
    this.userservice.getUsers(this.pagination.currentPage, this.pagination.itemsPerPage).subscribe((res: PaginatedResult<User[]>) => {
      this.users = res.result;
      this.pagination = res.pagination;
    }, error => {
      this.alertify.error(error);
    });
  }
  pageChanged(event: any): void {
    this.pagination.currentPage = event.page;
    this.loadUsers();
  }
}

13.memebes-list.html
<div class="text-center">
  <pagination [totalItems]="pagination.totalItems" 
  [itemsPerPage]="pagination.itemsPerPage"
   (pageChanged)="pageChanged($event)"
  [(ngModel)]="pagination.currentPage"></pagination>
</div>


  
