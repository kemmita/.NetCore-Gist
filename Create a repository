1.go to your data folder that you created earlier and create a file called IAuthRepository
using System.Threading.Tasks;
using DatingApp.API.models;

namespace DatingApp.API.data
{
    public interface IAuthRepository
    {
         Task<User> Register(User user, string password);
         Task<User> Login(string username, string password);
         Task<bool> UserExists(string username);
    }
}
2. in the same data folder create a AuthRepository
using System;
using System.Threading.Tasks;
using DatingApp.API.Data;
using DatingApp.API.models;
using Microsoft.EntityFrameworkCore;

namespace DatingApp.API.data
{
  public class AuthRepository : IAuthRepository 
  {
      private readonly DataContext _context;
      public AuthRepository (DataContext context)
      {
          _context = context;
      }
    public async Task<User> Login(string username, string password)
    {
      var user = await _context.Users.FirstOrDefaultAsync(x => x.UserName == username);
      if(user == null){
          return null;
      }
      if(!VerifyPasswordHash(password, user.PasswordHash, user.PasswordSalt)){
          return null;
          
      }
      return user;
      
    }

    private bool VerifyPasswordHash(string password, byte[] passwordHash, byte[] passwordSalt)
    {
       using (var hmac = new System.Security.Cryptography.HMACSHA512(passwordSalt)){
         var computedHash = hmac.ComputeHash(System.Text.Encoding.UTF8.GetBytes(password));
         for(int i = 0; i < computedHash.Length; i++){
             if(computedHash[i] != passwordHash[i]){
                return false;
             }
         }
         return true;
     }
    }

    public async Task<User> Register(User user, string password)
    {
      byte[] passwordHash, passwordSalt;
      createPasswordHash(password, out passwordHash, out passwordSalt);

      user.PasswordHash = passwordHash;
      user.PasswordSalt = passwordSalt;
      await _context.Users.AddAsync(user);
      await _context.SaveChangesAsync();

      return user;
    }

    private void createPasswordHash(string password, out byte[] passwordHash, out byte[] passwordSalt)
    {
     using (var hmac = new System.Security.Cryptography.HMACSHA512()){
         passwordSalt = hmac.Key;
         passwordHash = hmac.ComputeHash(System.Text.Encoding.UTF8.GetBytes(password));
     }
    }

    public async Task<bool> UserExists(string username)
    {
      if(await _context.Users.AnyAsync(x => x.UserName == username)){
            return true;
      }
      return false;
    }
  }
}

3. then in the startup.cs file add the scope
 public void ConfigureServices(IServiceCollection services)
        {
            
            services.AddDbContext<DataContext>(x => x.UseSqlite(Configuration.GetConnectionString("DefaultConnection")));
            services.AddCors();
            services.AddMvc();
            //below**
            services.AddScoped<IAuthRepository,  AuthRepository>();
            
        }


4. Now create an AuthController, notice how we are using our repository a lot like a dbcontext
using System.Threading.Tasks;
using DatingApp.API.data;
using DatingApp.API.Data;
using DatingApp.API.models;
using Microsoft.AspNetCore.Mvc;
namespace DatingApp.API.Controllers
{
    [Route("api/[controller]")]
    public class AuthController : Controller
    {
       private readonly IAuthRepository _repo;
        public AuthController(IAuthRepository repo)
        {
            _repo = repo;
        }

        [HttpPost("register")]
        public async Task<IActionResult> Register(string username, string password){
            
            username = username.ToLower();
            if(await _repo.UserExists(username)){
                return BadRequest("Username is already Taken");
            }
            var userToCreate = new User {
                UserName = username
            };
            var createdUser = await _repo.Register(userToCreate, password);
            return StatusCode(201);
        }
        
    }
}
