1. First create a interface, this will be placed within the data folder, this is a template of what methods will be used in the
//actual repository file, it is a bit like c++ .h files
using System.Collections.Generic;
using System.Threading.Tasks;
using DatingApp.API.models;

namespace DatingApp.API.data
{
    public interface IDatingRepository
    {
        // Create 2 Genereic classes to add and delete users
         void Add<T>(T enity) where T: class;
         void Delete<T>(T enity) where T: class;
        //  Create a async bool method for saveall
         Task<bool> SaveAll();
        //  create a IEnumerable to fetch all users async
         Task<IEnumerable<User>> GetUsers();
        //  Create anothewr async method to fetch a single user
         Task<User> GetUser(int Id);
    }
}

2. now in the same folder create the actual repository
using System.Collections.Generic;
using System.Threading.Tasks;
using DatingApp.API.Data;
using DatingApp.API.models;
using Microsoft.EntityFrameworkCore;

namespace DatingApp.API.data
{
  // use inhertience to inherit the interface we created for dating repository 
  public class DatingRepository : IDatingRepository
  {
 
 //notice how the database context is used here instead of the controller
      private readonly DataContext _context;

      public DatingRepository(DataContext context)
      {
          _context = context;
      }
    public void Add<T>(T enity) where T : class
    {
      _context.Add(enity);

    }

    public void Delete<T>(T enity) where T : class
    {
      _context.Remove(enity);
    }

    public async Task<User> GetUser(int Id)
    {
      var user = await _context.Users.Include(p => p.Photos).FirstOrDefaultAsync(u=>u.Id == Id);

      return user;
    }

    public async Task<IEnumerable<User>> GetUsers()
    {
      var users = await _context.Users.Include(p=> p.Photos).ToListAsync();
      return users;
    }

    public async Task<bool> SaveAll()
    {
      return await _context.SaveChangesAsync() > 0;
    }
  }
}

3. now in the controller folder create the controller
//note not all methods have been created yet in this controller
using System.Threading.Tasks;
using DatingApp.API.data;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;

namespace DatingApp.API.Controllers
{
    [Authorize]
    [Route("api/[controller]")]
    public class UsersController: Controller
    {
    //below we reference the repo like we would a database context
        private readonly IDatingRepository _repo;
        public UsersController(IDatingRepository repo)
        {
            _repo = repo;
        }

        //line 97 is  a great example of the repo above being used
        [HttpGet]
        public async Task<IActionResult> GetUsers(){
            var users = await _repo.GetUsers();
            return Ok(users);
        }
        
        [HttpGet("{id}")]
        public async Task<IActionResult> GetUser(int id){
            var user = await _repo.GetUser(id);
            return Ok(user);
        }
    }
}
