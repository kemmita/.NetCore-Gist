**Restricition**
here we want to retrieve all courses for level1 and only for level 1
static void Main(string[] args)
        {
            var context = new PlutoContext();
            //here is the extension method way of finding courses that are listed as level 1
            var levelone = context.Courses.Where(C => C.Level.Equals(1));
            foreach (var x in levelone)
            {
                Console.WriteLine(x.Name);
            }

            Console.ReadKey();
        }
**Ordering**
static void Main(string[] args)
        {
            var context = new PlutoContext();
            //here is the extension method way of finding courses that are listed as level 1
            var levelone = context.Courses
                .Where(C => C.Level.Equals(1))
                .OrderByDescending(C => C.Name)
                .ThenByDescending(C => C.Level);
            foreach (var x in levelone)
            {
                Console.WriteLine(x.Name);
            }

            Console.ReadKey();
        }
 **GroupBy**
 //below we will group courses that are in the same level and display them together
 static void Main(string[] args)
        {
            var context = new PlutoContext();
            var group = context.Courses.GroupBy(c => c.Level);
            foreach (var g in group)
            {
                Console.WriteLine(g.Key);
                foreach (var t in g)
                {
                    Console.WriteLine(t.Name);
                }
            }

            Console.ReadKey();
        }
        
**Joins**
 static void Main(string[] args)
        {
            var context = new PlutoContext();
            //the goal is to join the Authors with their courses, so we grab the Authors class 
            //so we join Courses with Auhtors
            context.Courses.Join(context.Authors, 
                //here are the keys we use to join
                c => c.AuthorId, 
                a => a.Id, 
                //and this is the result of joining 
                (course, author) => new {
                     CourseName = course.Name,
                     AuthorName = author.Name
            });
          

            Console.ReadKey();
        }
        
**groupjoin**
static void Main(string[] args)
        {
            var context = new PlutoContext();
            context.Authors.GroupJoin(context.Courses, 
                a => a.Id, c => c.AuthorId, 
                (auhtor, courses)=> new{
                    AuthorName = auhtor.Name,
                    CourseName = courses.Count()
            });
          

            Console.ReadKey();
        }
        
**All**
//we can use the All method to verify if all courses are over 50$
static void Main(string[] args)
        {
            var context = new PlutoContext();
            var results = context.Courses.All(c => c.FullPrice > 50);
            Console.WriteLine(results);
            Console.ReadKey();
        }

**Any**
this can check if we have any aouthors by the name of Mosh Hamedani
static void Main(string[] args)
        {
            var context = new PlutoContext();
            var results = context.Authors.Any(c => c.Name == "Mosh Hamedani");
            Console.WriteLine(results);
            Console.ReadKey();
        }
 
**Min and Max and average**
  static void Main(string[] args)
        {
            var context = new PlutoContext();
            //using min and max to determine the most and least expensive course
            var price = context.Courses.Max(c => c.FullPrice);
            var lowesPrice = context.Courses.Min(c => c.FullPrice);
            var avgPrice = context.Courses.Average(c => c.FullPrice);
            Console.WriteLine(price);
            Console.WriteLine(lowesPrice);
            Console.WriteLine(avgPrice);
            Console.ReadKey();
        }
**Find**
//the Find method takes the primary key from the database and returns that object
static void Main(string[] args)
        {
            var context = new PlutoContext();

            var course = context.Courses.Find(1);
            Console.WriteLine(course.Name);
           
            Console.ReadKey();
        }
        
        
