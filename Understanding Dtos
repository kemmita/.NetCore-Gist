1. first create a model/table for the database
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;

namespace DatingApp.API.models
{
    public class User
    {
        public int Id { get; set; }
        public string UserName {get; set;}
        public byte[] PasswordHash {get; set;} 
        public byte[] PasswordSalt {get; set;}
        public string Gender { get; set; }
        public DateTime DateOfBirth {get; set;}
        public string KnownAs { get; set; }
        public DateTime Created { get; set; }
        public DateTime LastActive {get; set;}
        public string Introduction { get; set; }
        public string LookingFor { get; set; }
        public string Interests { get; set; }
        public string City { get; set; }
        public string Country { get; set; }

        //here we create the 1-to-many relationship
        public ICollection<Photo> Photos { get; set; }

        public User (){
            Photos = new Collection<Photo>();
        }
    }
}


2. now create a dto in the dto folder, you will see that somne properties have been removed, this is for situations where you only want
//to call the specific properties below instead of the user model in its entiriety 
using System;
using System.Collections.Generic;
using DatingApp.API.models;

namespace DatingApp.API.Dtos
{
    public class UserForDetailedDto
    {
        public int Id { get; set; }
        public string UserName {get; set;}
        public string Gender { get; set; }
        public int Age {get; set;}
        public string KnownAs { get; set; }
        public DateTime Created { get; set; }
        public DateTime LastActive {get; set;}
        public string Introduction { get; set; }
        public string LookingFor { get; set; }
        public string Interests { get; set; }
        public string City { get; set; }
        public string Country { get; set; }
        public string PhotoUrl { get; set; }
        public ICollection<PhotosForDetailedDto> Photos {get; set;}
    }
}

3. now lets use the dto in a method within a controller, but in order for this to work we will need to implement automapping and you
can find directions for that in this repo.
 [HttpGet("{id}")]
        public async Task<IActionResult> GetUser(int id){
            var user = await _repo.GetUser(id);
             var userToReturn = _mapper.Map<UserForDetailedDto>(user);
            return Ok(userToReturn);
        }
 
