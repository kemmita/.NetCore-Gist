0. Create a user model 

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace tattooApi.Models
{
    public class User
    {
        public int Id { get; set; }
        public string Username { get; set; }
        public byte[] PasswordHash { get; set; }
        public byte[] PasswordSalt { get; set; }
    }
}

1. We will start off by creating a new directory called Data and create an interface for our repository pattern that we will be utilizing.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using tattooApi.Models;

namespace tattooApi.Data
{
    public interface IAuthRepository
    {
        Task<User> Register(User user, string password);
        Task<User> Login(string username, string password);
        Task<bool> UserExists(string username);
    }
}


2. Next we will create the repository and implement the interface.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using tattooApi.Models;

namespace tattooApi.Data
{
    public class AuthRepository : IAuthRepository
    {
        private readonly ApplicationDbContext _db;
        public AuthRepository(ApplicationDbContext db)
        {
            _db = db;
        }
        public async Task<User> Register(User user, string password)
        {
            byte[] passwordHash, passwordSalt;
            CreatePasswrodHash(password, out passwordHash, out passwordSalt);

            user.PasswordHash = passwordHash;
            user.PasswordSalt = passwordSalt;
            await _db.Users.AddAsync(user);
            await _db.SaveChangesAsync();
            return user;
        }

        private void CreatePasswrodHash(string password, out byte[] passwordHash, out byte[] passwordSalt)
        {
            using (var hmac = new System.Security.Cryptography.HMACSHA512())
            {
                passwordSalt = hmac.Key;
                passwordHash = hmac.ComputeHash(System.Text.Encoding.UTF8.GetBytes(password));
            }
            
        }

        public async Task<User> Login(string username, string password)
        {
            var userToLogin = await _db.Users.FirstOrDefaultAsync(u => u.Username == username);
            if (userToLogin == null)
            {
                return null;
            }

            if (!VerifyPasswordHash(password, userToLogin.PasswordHash, userToLogin.PasswordSalt))
            {
                return null;
            }
            return userToLogin;
        }

        private bool VerifyPasswordHash(string password, byte[] passwordHash, byte[] passwordSalt)
        {
            using (var hmac = new System.Security.Cryptography.HMACSHA512(passwordSalt))
            {
                var computedHash = hmac.ComputeHash(System.Text.Encoding.UTF8.GetBytes(password));
                for (int i = 0; i < computedHash.Length; i++)
                {
                    if (computedHash[i] != passwordHash[i])
                    {
                        return false;
                    }
                }
            }
            return true;
        }

        public async Task<bool> UserExists(string username)
        {
             
            if (await _db.Users.AnyAsync(u => u.Username == username))
            {
                return true;
            }
                return false;
        }
    }
}

3. Next we need to add our AuthRepository to our startup.cs file, we need to add it as a service, so that we can utilize dependency
injection while throughout our application, mainly in our controllers.

        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddDbContext<ApplicationDbContext>(options =>
                options.UseSqlServer(Configuration.GetConnectionString("DefaultConnection")));
            services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_1);
            services.AddCors();
            services.AddScoped<IAuthRepository, AuthRepository>();
        }
 
 4. Create user for register dto to alter the user model being returned.
 
 using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace tattooApi.Dtos
{
    public class UserForRegisterDto
    {
        public string Username { get; set; }
        public string Password { get; set; }
    }
}

5.

