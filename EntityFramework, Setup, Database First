1.to install go to tools/nuget packagemanager/packagemanager console
2. the console should appear at the bottom and when it does run command install-package EntityFramework
3. got to folder and add new item, ADO.NET and follow the steps to connect to your database
4.after you do this BlogModel will be created, your tables that you created in MSSQL will now appear here as classes.
//below is a table we created in MSSQL
create table Posts(
PostID int primary key not null,
DatePublished smalldatetime null,
Title varchar(500) null,
Body varchar(800) null

);
//With Entity framework it creates classes out of the tables and creates properties for the columns
namespace DataBaseFirst
{
    using System;
    using System.Collections.Generic;
    
    public partial class Post
    {
        public int PostID { get; set; }
        public Nullable<System.DateTime> DatePublished { get; set; }
        public string Title { get; set; }
        public string Body { get; set; }
    }
}

//main class
  static void Main(string[] args)
        {
            //now we will create an instance of our database. EntityEntities gets its name from the database you created
            //in mssql and then attaches the word Entities to the end of it. if you ever need to verify the name, go to
            //BlogModel.Context.cs
            var dataBObj = new EntityEntities();
            //create an object of our Post table/class, add data to all columns
            var post = new Post()
            {
                PostID = 2,
                DatePublished = DateTime.Now,
                Title = "I eat food",
                Body = "I eat so much food everday, it is sick"
            };
            //take object of the database and call the Posts class/Table and add the data above 
            dataBObj.Posts.Add(post);
            //then save your changes 
            dataBObj.SaveChanges();
            Console.ReadKey();
        }



**********Making changes after the fact****************
//Adding a new table
create the table in MSSQL, then go to visual studio and open up your model.edmx right click in a blank area and select 
update model from database, make sure to check Tables and hit finish

//updating a table
alter table in MSSQL, then go to visual studio and open up your model.edmx right click in a blank area and select 
update model then click finish

//deleting table
delete table from mssql and inside of edmx, right click the model of the table you just deleted and select delete


**********Importing Stored Procedures****************
go to your model in visual studio right click and select update model then select stored procedures and then click finish, then save the model.
then go to your dbcontext and you will see the name of your stored procedures have become methods
now go into your class that extends dbcontext, here we call a stored procedure from our database 
  public virtual ObjectResult<GetCourses_Result> GetCourses()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCourses_Result>("GetCourses");
        }
        
//in the main class we can call that method
    static void Main(string[] args)
        {
            var context = new PlutoDbContext();
           var courses =  context.GetCourses();
            foreach(var c in courses)
            {
                Console.WriteLine(c.Title);
            }
            Console.ReadKey();
        }
 
 
//working with enums in the database model 
 right click and opne up model browser, inside of the list you will see Enum Types, right click that folder and select add new Enum
 close that and make sure to save. select a column within a table and select its properties, once that opens you can change its type 
 to the new enum that you created. 
 static void Main(string[] args)
        {
            var context = new PlutoDbContext();
            var course = new Course();
            //below with CourseLevel.Beginner we are using the enum we created
            var x = course.Level = CourseLevel.Beginner;
            Console.WriteLine(x);
            Console.ReadKey();
        }
  //you can also create an enum within your code and import it to the database model
